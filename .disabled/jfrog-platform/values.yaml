jfrog-platform:
  # Default values for jfrog-platform

  # nameOverride:
  # fullnameOverride:

  # If this is an upgrade over an existing platform chart(>= 10.0.0), explicitly pass 'gaUpgradeReady=true' to upgrade
  gaUpgradeReady: false

  global:
    # imagePullSecrets:
    #   - myRegistryKeySecretName
    imageRegistry: releases-docker.jfrog.io
    jfrogUrl: '{{ include "jfrog-platform.jfrogUrl" . }}'
    ## Artifactory UI URL - Mandatory
    ## Update jfrogUrlUI before running builds on Pipelines
    ## This must be the external URL of Artifactory, for example: https://artifactory.example.com
    jfrogUrlUI: '{{ include "jfrog-platform.jfrogUrl" . }}'
    joinKey: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
    masterKey: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    ## Chart.AppVersion for each product can be overidden using global.versions.<product>
    ## For example : For artifactory, using global.versions.artifactory
    ## Note: Order of preference is 1) global.versions 2) .Values.artifactory.image.tag 3) Chart.AppVersion
    versions:
      router: 7.36.1
    #   artifactory:
    #   xray:
    #   distribution:
    #   insight:
    #   pipelines:
    database:
      host: "{{ .Release.Name }}-postgresql"
      port: 5432
      sslMode: disable
      adminUsername: postgres
      adminPassword: postgres
      secrets: {}
        # adminUsername:
        #   name: "jp-database-creds"
        #   key: "db-admin-user"
        # adminPassword:
        #   name: "jp-database-creds"
      #   key: "db-admin-password"
      initContainerSetupDBImage: releases-docker.jfrog.io/postgres:13.4-alpine
      initContainerImagePullPolicy: Always
      # If you are using external postgresql, set initDBCreation: false
      initDBCreation: true
    ## certificates added to this secret will be copied to $JFROG_HOME/<product>/var/etc/security/keys/trusted directory
    customCertificates:
      enabled: false
      # certificateSecretName:

    customInitContainersBegin: |
      {{ template "initdb" . }}
    customVolumes: |
      {{ template "initdb-volume" . }}

  ## This Postgresql is used by all products , set postgresql.enabled: false, when you want to use external postgresql for all products
  postgresql:
    enabled: true
    image:
      repository: bitnami/postgresql
      tag: 13.4.0-debian-10-r39
    postgresqlUsername: postgres
    postgresqlPassword: postgres
    postgresqlExtendedConf:
      max_connections: 1000
      max_wal_size: 1000MB
    persistence:
      size: 500Gi

  ## This Rabbitmq is used by Xray and Pipelines only, set rabbitmq.enabled: false, when Xray or Pipelines is not enabled
  rabbitmq:
    enabled: true
    image:
      repository: bitnami/rabbitmq
      tag: 3.8.14-debian-10-r32
    auth:
      username: admin
      password: password
      erlangCookie: secretcookie
    maxAvailableSchedulers: null
    onlineSchedulers: null
    persistence:
      size: 50Gi
    extraEnvVars:
      - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
        value: "+S 2:2 +sbwt none +sbwtdcpu none +sbwtdio none"
    extraSecretsPrependReleaseName: true
    extraSecrets:
      load-definition:
        load_definition.json: |
          {
            "vhosts": [
              {
                "name": "xray"
              }
            ],
            "permissions": [
            {
              "user": "admin",
              "vhost": "xray",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
            ],
            "policies": [
              {
                "name": "ha-all",
                "apply-to": "all",
                "pattern": ".*",
                "vhost": "xray",
                "definition": {
                  "ha-mode": "all",
                  "ha-sync-mode": "automatic",
                }
              }
            ]
          }
    loadDefinition:
      enabled: true
      existingSecret: '{{ .Release.Name }}-load-definition'
    extraConfiguration: |
      management.load_definitions = /app/load_definition.json

  ## This Redis is used by pipelines only, set redis.enabled: false, when pipelines is not enabled
  redis:
    enabled: true
    image:
      repository: bitnami/redis
      tag: 6.2.1-debian-10-r9
    cluster:
      enabled: false
    usePassword: false

  artifactory:
    installerInfo: '{"productId": "Helm_JFrogPlatform/{{ printf "10.4.1-%s" .Chart.AppVersion  }}", "features": [ { "featureId": "Platform/{{ printf "%s-%s" "kubernetes" .Capabilities.KubeVersion.Version }}"}]}'
    enabled: true
    postgresql:
      enabled: false
    waitForDatabase: false
    database:
      type: postgresql
      driver: org.postgresql.Driver
      url: '{{ include "database.url" . }}'
      user: artifactory
      password: artifactory
    # Note: For artifactory Pro license, mission-control is not supported, Hence, set mc.enabled: false
    mc:
      enabled: true
    ## Note: This needs to be set to true when artifactory is connected with pipelines and Nginx instances in front of artifactory need to allow websocket traffic. Only applicable on E+ license.
    pipelines:
      enabled: false
    artifactory:
      # Note: For HA deployments, set replicaCount >1 (recommended 3)
      replicaCount: 1
      migration:
        enabled: false
      persistence:
        size: 200Gi
      # license:
      #   secret:
      #   dataKey:
    nginx:
      tlsSecretName: jfrog-tls
      service:
        type: ClusterIP
        ssloffload: true
        annotations:
          service.beta.openshift.io/serving-cert-secret-name: jfrog-tls
      http:
        enabled: true
        externalPort: 80
        internalPort: 8080
      https:
        enabled: true
        externalPort: 443
        internalPort: 8443
      artifactoryConf: |
        {{- if .Values.nginx.https.enabled }}
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_certificate  {{ .Values.nginx.persistence.mountPath }}/ssl/tls.crt;
        ssl_certificate_key  {{ .Values.nginx.persistence.mountPath }}/ssl/tls.key;
        ssl_session_cache shared:SSL:1m;
        ssl_prefer_server_ciphers   on;
        {{- end }}
        ## server configuration
        server {
        {{- if .Values.nginx.internalPortHttps }}
          listen {{ .Values.nginx.internalPortHttps }} ssl;
        {{- else -}}
          {{- if .Values.nginx.https.enabled }}
          listen {{ .Values.nginx.https.internalPort }} ssl;
          {{- end }}
        {{- end }}
        {{- if .Values.nginx.internalPortHttp }}
          listen {{ .Values.nginx.internalPortHttp }};
        {{- else -}}
          {{- if .Values.nginx.http.enabled }}
          listen {{ .Values.nginx.http.internalPort }};
          {{- end }}
        {{- end }}
          server_name ~(?<repo>.+)\.{{ include "artifactory.fullname" . }} {{ include "artifactory.fullname" . }}
          {{- range .Values.ingress.hosts -}}
            {{- if contains "." . -}}
              {{ "" | indent 0 }} ~(?<repo>.+)\.{{ . }}
            {{- end -}}
          {{- end -}};

          if ($http_x_forwarded_proto = '') {
            set $http_x_forwarded_proto  $scheme;
          }
          ## Application specific logs
          ## access_log /var/log/nginx/artifactory-access.log timing;
          ## error_log /var/log/nginx/artifactory-error.log;
          rewrite ^/artifactory/?$ / redirect;
          if ( $repo != "" ) {
            rewrite ^/(v1|v2)/(.*) /artifactory/api/docker/$repo/$1/$2 break;
          }
          chunked_transfer_encoding on;
          client_max_body_size 0;

          location / {
            proxy_read_timeout  900;
            proxy_pass_header   Server;
            proxy_cookie_path   ~*^/.* /;
            proxy_pass          {{ include "artifactory.scheme" . }}://{{ include "artifactory.fullname" . }}:{{ .Values.artifactory.externalPort }}/;
            {{- if .Values.nginx.service.ssloffload}}
            proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host;
            {{- else }}
            proxy_set_header    X-JFrog-Override-Base-Url $http_x_forwarded_proto://$host:$server_port;
            proxy_set_header    X-Forwarded-Port  $server_port;
            {{- end }}
            proxy_set_header    Host              $http_host;
            proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
            add_header Strict-Transport-Security always;

            proxy_buffering off;
            proxy_request_buffering off;


            location /artifactory/ {
              if ( $request_uri ~ ^/artifactory/(.*)$ ) {
                proxy_pass       {{ include "artifactory.scheme" . }}://{{ include "artifactory.fullname" . }}:{{ .Values.artifactory.externalArtifactoryPort }}/artifactory/$1;
              }
              proxy_pass         {{ include "artifactory.scheme" . }}://{{ include "artifactory.fullname" . }}:{{ .Values.artifactory.externalArtifactoryPort }}/artifactory/;
            }
          }
        }

  xray:
    enabled: true
    unifiedUpgradeAllowed: true
    postgresql:
      enabled: false
    database:
      url: '{{ include "database.url" . }}'
      user: xray
      password: xray
    common:
      persistence:
        size: 200Gi
      rabbitmq:
        connectionConfigFromEnvironment: false
    rabbitmq:
      enabled: false
      external:
        username: admin
        password: password
        url: "amqp://{{ .Release.Name }}-rabbitmq:5672/xray"
        erlangCookie: secretcookie

  distribution:
    enabled: false
    unifiedUpgradeAllowed: true
    postgresql:
      enabled: false
    database:
      url: '{{ include "database.url" . }}'
      user: distribution
      password: distribution

  insight:
    enabled: true
    unifiedUpgradeAllowed: true
    postgresql:
      enabled: false
    database:
      url: '{{ include "database.url" . }}'
      user: insight
      password: insight
      name: '{{ include "database.name" . }}'
    elasticsearch:
      javaOpts:
        xms: "2g"
        xmx: "2g"

  pipelines:
    enabled: false
    unifiedUpgradeAllowed: true
    postgresql:
      enabled: false
    global:
      postgresql:
        host: "{{ .Release.Name }}-postgresql"
        port: 5432
        database: "pipelinesdb"
        user: "postgres"
        password: "postgres"
    pipelines:
      api:
        externalUrl: http://pipelines.test.com
      www:
        externalUrl: http://pipelines.test.com
      msg:
        uiUserPassword: password
    redis:
      enabled: false
    rabbitmq:
      enabled: false
      internal_ip: "{{ .Release.Name }}-rabbitmq"
      msg_hostname: "{{ .Release.Name }}-rabbitmq"
      port: 5672
      manager_port: 15672
      ms_username: admin
      ms_password: password
      cp_username: admin
      cp_password: password
      root_vhost_exchange_name: rootvhost
      erlang_cookie: secretcookie
      build_vhost_name: pipelines
      root_vhost_name: pipelinesRoot
      protocol: amqp