# yaml-language-server: $schema=./values.schema.json
# Please, note that this will override the image parameters, including dependencies, configured to use the global value
global:
  # global.imagePullSecrets -- (String[]) global value for image.pullSecrets
  imagePullSecrets: []
  ingress:
    # global.ingress.className -- (String) global value for ingress.className
    className: ""
    # global.ingress.hostname -- (String) global value for ingress.hostname
    hostname: ""
    # global.ingress.tls -- (Boolean) global value for ingress.tls
    tls: false
    # global.ingress.certManager -- (Boolean) global value for ingress.certManager
    certManager: false
    # global.ingress.selfSigned -- (Boolean) global value for ingress.selfSigned
    selfSigned: false

existingSecretPerPassword: {}

env:
  # env.existingSecret -- (Object) An already existing secret containing auth info
  ## e.g:
  ## existingSecret:
  ##   name: mySecret
  ##   keyMapping:
  ##     admin-password: myPasswordKey
  existingSecret: {}
  # env.existingSecretPerPassword -- (Object) Override `existingSecret` and other secret values
  ## e.g:
  ## existingSecretPerPassword:
  ##   keyMapping:
  ##     adminPassword: KEYCLOAK_ADMIN_PASSWORD
  ##     databasePassword: password
  ##   adminPassword:
  ##     name: keycloak-test2.credentials ## release-name
  ##   databasePassword:
  ##     name: keycloak.pocwatt-keycloak-cluster.credentials
  existingSecretPerPassword: {}
  # env.proxyAddressForwarding -- (Boolean) Whether the proxy address should be forwarded as address to Keycloak
  proxyAddressForwarding: true
  # env.loggingLevelRoot -- (Enum) The log level for Keycloak
  loggingLevelRoot: INFO
  # env.persistSecrets -- (Boolean) If true, the secrets will be persisted after uninstallation
  persistSecrets: false
  db:
    # env.db.root.existingSecret -- (String) Name of an existing secret resource containing the database credentials
    existingSecret: ""
    # env.db.root.existingSecretPasswordKey -- (String) Name of an existing secret key containing the database credentials
    existingSecretPasswordKey: ""
    # env.db.vendor -- (String) The database vendor (e.g. mariadb)
    vendor: mariadb
    # env.db.createDatabase -- (Boolean) Try to create and initialize database automatically
    createDatabase: true
    # env.db.host -- (String) The database host
    host: ""
    # env.db.port -- (Int) The database port
    port: 3306
    # env.db.database -- (Boolean) The database name
    database: keycloak
    # env.db.user -- (Boolean) The database user
    user: keycloak
    # env.db.password -- (String) The database password (if not provided, will be generated)
    password: ""

    root:
      # env.db.root.existingSecret -- (String) An already existing secret for root containing auth info
      existingSecret: ""
      # env.db.root.existingSecretKey -- (String)
      existingSecretKey: ""
      # env.db.root.user -- (String) The database root user
      user: root
      # env.db.root.password -- (String) The database root password (if not provided, autodetection of secret will be used)
      password: ""
  admin:
    # env.admin.user -- (Boolean) The admin user for Keycloak
    user: admin
    # env.admin.password -- (String) The admin password for Keycloak (if not provided, will be generated)
    password: ""

# extraEnv -- (Object) An map of extra provided environment variables
extraEnv: []

# nameOverride -- (String) Partially override common.names.fullname
nameOverride: ""
# fullnameOverride -- (String) Fully override common.names.fullname
fullnameOverride: ""
# componentName -- (String) The component type within the architecture
componentName: "server"
# commonLabels -- (String) labels to add to all deployed objects
commonLabels: {}
# commonAnnotations -- (String) Annotations to add to all deployed objects
commonAnnotations: {}
# clusterDomain -- (String) Kubernetes cluster domain name
clusterDomain: cluster.local

image:
  # image.registry -- (String) image registry
  registry: docker.devops.usu.group
  # image.repository -- (String) image repository
  repository: usu-shared/usu-user-management/keycloak
  # image.tag -- image tag (immutable tags are recommended)
  tag: 2.0.0
  # image.pullPolicy -- (Always / Never / IfNotPresent) image pull policy;
  # ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  #
  pullPolicy: Always
  # image.pullSecrets -- (String[]) Optionally specify an array of imagePullSecrets;
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets: []

deployment:
  # deployment.containerPort -- (Number) The port the container is listening on.
  containerPort: 8080
  # deployment.replicaCount -- (Number) Number of replicas to deploy
  replicaCount: 1
  #
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  startupProbe:
    # deployment.startupProbe.enabled -- (Boolean) Enable startupProbe on nodes
    enabled: true
    # deployment.startupProbe.initialDelaySeconds -- (Number) Initial delay seconds for startupProbe
    initialDelaySeconds: 30
    # deployment.startupProbe.periodSeconds -- (Number) Period seconds for startupProbe
    periodSeconds: 5
    # deployment.startupProbe.timeoutSeconds -- (Number) Timeout seconds for startupProbe
    timeoutSeconds: 1
    # deployment.startupProbe.failureThreshold -- (Number) Failure threshold for startupProbe
    failureThreshold: 60
    # deployment.startupProbe.successThreshold -- (Number) Success threshold for startupProbe
    successThreshold: 1
  #
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  livenessProbe:
    # deployment.livenessProbe.enabled -- (Boolean) Enable livenessProbe on nodes
    enabled: true
    # deployment.livenessProbe.initialDelaySeconds -- (Number) Initial delay seconds for livenessProbe
    initialDelaySeconds: 300
    # deployment.livenessProbe.periodSeconds -- (Number) Period seconds for livenessProbe
    periodSeconds: 1
    # deployment.livenessProbe.timeoutSeconds -- (Number) Timeout seconds for livenessProbe
    timeoutSeconds: 5
    # deployment.livenessProbe.failureThreshold -- (Number) Failure threshold for livenessProbe
    failureThreshold: 3
    # deployment.livenessProbe.successThreshold -- (Number) Success threshold for livenessProbe
    successThreshold: 1
  #
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  readinessProbe:
    # deployment.readinessProbe.enabled -- (Boolean) Enable readinessProbe on nodes
    enabled: true
    # deployment.readinessProbe.initialDelaySeconds -- (Number) Initial delay seconds for readinessProbe
    initialDelaySeconds: 30
    # deployment.readinessProbe.periodSeconds -- (Number) Period seconds for readinessProbe
    periodSeconds: 10
    # deployment.readinessProbe.timeoutSeconds -- (Number) Timeout seconds for readinessProbe
    timeoutSeconds: 1
    # deployment.readinessProbe.failureThreshold -- (Number) Failure threshold for readinessProbe
    failureThreshold: 3
    # deployment.readinessProbe.successThreshold -- (Number) Success threshold for readinessProbe
    successThreshold: 1
  #
  # resource requests and limits
  # ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    # deployment.resources.limits -- (Object) The resources limits for the containers
    limits: {}
    # deployment.resources.requests -- (Object) The requested resources for the containers
    requests:
      cpu: "100m"
      memory: "600Mi"
  #
  # Configure Pods Security Context
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  podSecurityContext:
    # deployment.podSecurityContext.enabled -- (Boolean) Enable pods' Security Context
    enabled: true
    # deployment.podSecurityContext.fsGroup -- (String) Set pod's Security Context fsGroup
    fsGroup: 1001
  #
  # Configure Container Security Context
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  containerSecurityContext:
    # deployment.containerSecurityContext.enabled -- (Boolean) Enable containers' Security Context
    enabled: true
    # deployment.containerSecurityContext.runAsUser -- (String) Set containers' Security Context runAsUser
    runAsUser: 1001

  # deployment.hostAliases -- (Object[]) pods host aliases;
  # ref: https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  hostAliases: []
  # deployment.podLabels -- (Object) Extra labels for pods;
  # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  #
  podLabels: {}
  # deployment.podAnnotations -- (Object) Annotations for pods
  # ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  #
  podAnnotations: {}
  # deployment.podAffinityPreset -- (soft / hard) Pod affinity preset.
  # Ignored if `deployment.affinity` is set.
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinityPreset: ""
  # deployment.podAntiAffinityPreset -- (soft / hard) Pod anti-affinity preset.
  # Ignored if `deployment.affinity` is set.
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAntiAffinityPreset: soft
  #
  # Node deployment.affinity preset
  # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  nodeAffinityPreset:
    # deployment.nodeAffinityPreset.type -- (soft / hard) Node affinity preset type.
    # Ignored if `deployment.affinity` is set.
    type: ""
    # deployment.nodeAffinityPreset.key -- Node label key to match.
    # Ignored if `deployment.affinity` is set
    key: ""
    # deployment.nodeAffinityPreset.values -- (String[]) Node label values to match. Ignored if `deployment.affinity` is set
    values: []
  #
  # deployment.affinity -- (Object) Affinity for pods assignment.
  # NOTE: `deployment.podAffinityPreset`, `deployment.podAntiAffinityPreset`, and `deployment.nodeAffinityPreset` will be ignored when it's set
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  # deployment.nodeSelector -- (Object) Node labels for pods assignment;
  # ref: https://kubernetes.io/docs/user-guide/node-selection/
  nodeSelector: {}
  # deployment.tolerations -- (Object) Tolerations for pods assignment;
  # ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  updateStrategy:
    # deployment.updateStrategy.type -- (RollingUpdate / OnDelete) Statefulset strategy type;
    # ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    #
    type: Recreate
  #
  # deployment.priorityClassName -- pods' priorityClassName
  priorityClassName: ""

service:
  # service.enabled -- (Boolean) Enable sevice creation
  enabled: true
  # service.type -- (ClusterIP / NodePort / LoadBalancer / ExternalName ) service type
  type: ClusterIP
  # service.port -- (Number) service HTTP port
  port: 80
  #
  nodePorts:
    # service.nodePorts.http -- (Number) service HTTP port
    http:
    # service.nodePorts.https -- (Number) service HTTPS port
    https:
  #
  # service.clusterIP -- (String) service Cluster IP
  clusterIP:
  # service.loadBalancerIP -- (String) service Load Balancer IP
  # ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  loadBalancerIP:
  # service.loadBalancerSourceRanges -- (String[]) service Load Balancer sources
  # ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  loadBalancerSourceRanges: []
  # service.externalTrafficPolicy -- ( Cluster / Local) service external traffic policy
  # ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  externalTrafficPolicy: Cluster
  # service.annotations -- (Object) Additional custom annotations for service
  annotations: {}
#
# ingress parameters
# ref: http://kubernetes.io/docs/user-guide/ingress/
ingress:
  # ingress.enabled -- (Boolean) Enable ingress record generation
  enabled: true
  # ingress.className -- (String) The class name of the ingress class
  className: "nginx"
  # ingress.pathType -- (ImplementationSpecific / Exact / Prefix) Ingress path type
  pathType: ImplementationSpecific
  # ingress.apiVersion -- (String) Force Ingress API version (automatically detected if not set)
  apiVersion:
  # ingress.hostname -- (String) Default host for the ingress record
  hostname: ""
  # ingress.path -- (String) Default path for the ingress record.
  # NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  path: ""
  # ingress.annotations -- (Object) Additional custom annotations for the ingress record.
  # NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k

  # ingress.tls -- (Boolean) Enable TLS configuration for the host defined at `ingress.hostname` parameter.
  # TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  # You can:
  #   - Use the `ingress.secrets` parameter to create this TLS secret
  #   - Relay on cert-manager to create it by setting `ingress.certManager=true`
  #   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  tls: false
  # ingress.certManager -- (Boolean) Add the corresponding annotations for cert-manager integration
  certManager: false
  # ingress.selfSigned -- (Boolean) Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  selfSigned: false
  # ingress.secrets -- (Object[]) Custom TLS certificates as secrets.
  # NOTE: 'key' and 'certificate' are expected in PEM format.
  # NOTE: 'name' should line up with a 'secretName' set further up.
  # If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates.
  # If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days.
  # It is also possible to create and manage the certificates outside of this helm chart.
  # Please see README.md for more information
  # e.g:
  # secrets:
  #   - name: %%COMPONENT_NAME%%.local-tls
  #     key: |-
  #       -----BEGIN RSA PRIVATE KEY-----
  #       ...
  #       -----END RSA PRIVATE KEY-----
  #     certificate: |-
  #       -----BEGIN CERTIFICATE-----
  #       ...
  #       -----END CERTIFICATE-----
  #
  secrets: []

# RBAC configuration
rbac:
  # rbac.create -- (Boolean) Specifies whether RBAC resources should be created
  create: false

# ServiceAccount configuration
serviceAccount:
  # serviceAccount.create -- (Boolean) Specifies whether a ServiceAccount should be created
  create: true
  # serviceAccount.name -- (String) The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the common.names.fullname template
  name: ""
#
# ref: https://kubernetes.io/de/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  # autoscaling.enabled -- (Boolean) Enable autoscaling
  enabled: false
  # autoscaling.minReplicas -- (Number) The minimum number of replicas
  minReplicas: 1
  # autoscaling.maxReplicas -- (Number) The maximum number of replicas
  maxReplicas: 100
  # autoscaling.targetCPUUtilizationPercentage -- (Number) The CPU utilization percentage which should be reached
  targetCPUUtilizationPercentage: 80
  # autoscaling.targetMemoryUtilizationPercentage -- (Number) The memory utilization percentage which should be reached
  targetMemoryUtilizationPercentage:
