name: Check and Update Argo CD Version

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour

jobs:
  check_and_update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get current Argo CD version from kustomization.yaml
        id: get_current_version
        run: |
          current_version=$(grep -oP '(?<=ref=)v\d+\.\d+\.\d+' argocd/kustomization.yaml)
          echo "::set-output name=version::$current_version"

      - name: Determine version to update to
        id: determine_version_to_update
        run: |
          releases=$(curl -s https://api.github.com/repos/argoproj/argo-cd/releases)
          current_version="${{ steps.get_current_version.outputs.version }}"
          is_rc="false"
          if [[ "$current_version" =~ rc[0-9]+$ ]]; then
            is_rc="true"
          fi
          highest_stable_version=""
          next_rc_version=""
          for release in $(echo "$releases" | jq -r '.[].tag_name'); do
            if [[ "$release" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-.+)?$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
              prerelease="${BASH_REMATCH[4]}"
              if [[ "$prerelease" != "rc"* ]]; then
                if [[ -z $highest_stable_version ]] || (( major > ${highest_stable_version%%.*} || ( major == ${highest_stable_version%%.*} && minor > ${highest_stable_version#*.} ) || ( major == ${highest_stable_version%%.*} && minor == ${highest_stable_version#*.} && patch > ${highest_stable_version##*.} ) )); then
                  highest_stable_version="$major.$minor.$patch"
                fi
              fi
              if [[ "$is_rc" == "true" && "$release" == "${current_version%.*}-"* ]]; then
                next_rc_version="$major.$minor.$patch-$prerelease"
              fi
            fi
          done
          if [[ "$is_rc" == "true" && "$next_rc_version" != "" ]]; then
            echo "$next_rc_version"
          else
            echo "$highest_stable_version"
          fi

      - name: Compare versions and update kustomization.yaml if needed
        if: steps.determine_version_to_update.outputs.version != steps.get_current_version.outputs.version && steps.determine_version_to_update.outputs.version != null && steps.get_current_version.outputs.version != null
        run: |
          sed -i "s/ref=${{ steps.get_current_version.outputs.version }}/ref=${{ steps.determine_version_to_update.outputs.version }}/" argocd/kustomization.yaml
          echo "Updated Argo CD version in kustomization.yaml from ${{ steps.get_current_version.outputs.version }} to ${{ steps.determine_version_to_update.outputs.version }}"
        working-directory: ${{ github.workspace }}

      - name: Commit and push if kustomization.yaml was updated
        if: steps.determine_version_to_update.outputs.version != steps.get_current_version.outputs.version && steps.determine_version_to_update.outputs.version != null && steps.get_current_version.outputs.version != null
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add argocd/kustomization.yaml
          git commit -m "Update Argo CD version to ${{ steps.determine_version_to_update.outputs.version }}"
          git push
