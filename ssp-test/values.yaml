# Default values for usu-portal.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: nginx
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

nameOverride: ""
fullnameOverride: ""

imagePullSecrets:
  - name: usu-regcred

global:
  ingress:
    className: nginx
    hostname: kubernetes.docker.internal
  imagePullSecrets:
    - name: usu-regcred
  openshift:
    enabled: true

portalApp:
  client:
    container:
      image: docker.devops.usu.group/usu-portal/portal/client
      tag: 2-4-1
  backend:
    container:
      image: docker.devops.usu.group/usu-portal/portal/backend
      tag: 2-4-1
  schemas:
    container:
      image: docker.devops.usu.group/usu-portal/portal/json-schemas
      tag: 2-4-1
  valuemationPortalPdapter:
    container:
      image: docker.devops.usu.group/usu-portal/portal/valuemation-portal-adapter
      tag: 2-4-1
  valuemationAnalytcsPortalAdapter:
    container:
      image: docker.devops.usu.group/usu-portal/portal/vma-portal-adapter
      tag: 2-4-1

mariadb:
  nameOverride: "mariadb-app"
  image:
    debug: true
  architecture: standalone
  primary:
    service:
      port: 3307
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 1Gi
        cpu: 1000m
  auth:
    database: portal
    username: portal
    password: password
    rootPassword: password
  volumePermissions:

consul:
  global:
    name: consul
    datacenter: dc1
  server:
    replicas: 1
    securityContext:
      runAsNonRoot: false
      runAsGroup: 0
      runAsUser: 0
      fsGroup: 0
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 100Mi
        cpu: 100m
  ui:
    enabled: true
    service:
      type: 'NodePort'
    ingress:
      enabled: true
      hosts:
        - host: localhost
          paths:
#            - /ui
            - /v1
      annotations: |
        'kubernetes.io/ingress.class': 'nginx'
  connectInject:
    enabled: true
  controller:
    enabled: true

user-management:

  user-management-ui:
    enabled: true
    image:
      imagePullSecrets:
        - name: usu-regcred
    angular-base:
      env:
        baseUrl: /user-management-ui/
        apiUrl: http://kubernetes.docker.internal/user-management-service/
        keycloakUrl: http://kubernetes.docker.internal/auth/

  user-management-service:
    enabled: true
    image:
      imagePullSecrets:
        - name: usu-regcred
    env:
      kcConnection:
        realm: usu
        auth:
          user: admin
          password: admin
        externalUrl: "http://kubernetes.docker.internal/auth/"
        internalUrl: "http://um-keycloak/auth/"
    initContainers:
      - name: wait-for-dependent-service
        image: docker.devops.usu.group/usu-shared/usu-prototypes/wait-for-200:0.0.2
        env:
          - name: URL
            value: "um-keycloak/auth/"

  keycloak:
    ingress:
      enabled: true
      path: /
    image:
      tag: 4.0.0-g62d8c36
      pullPolicy: Always
      imagePullSecrets:
        - name: usu-regcred
    env:
      db:
        vendor: mariadb
        host: um-mariadb
        port: 3306
        database: keycloak
        user: keycloak
        password: keycloak
      admin:
        user: admin
        password: admin
      loggingLevelRoot: INFO

  mariadb:
    image:
      debug: true
    architecture: standalone
    auth:
      database: keycloak
      username: keycloak
      password: keycloak
      rootPassword: keycloak
    volumePermissions:
      enabled: true

ingress:
  enabled: true
  className: nginx
  rewritePath: true
  pathPrefix: ""
  pathType: ImplementationSpecific
  hosts:
    - host: kubernetes.docker.internal
  class: nginx

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

## ingress:
##   enabled: true
##   className: ""
##   annotations: {}
##     # kubernetes.io/ingress.class: nginx
##     # kubernetes.io/tls-acme: "true"
##   hosts:
##     - host: localhost
##       paths:
##         - path: /
##           pathType: ImplementationSpecific
##   tls: []
##   #  - secretName: chart-example-tls
##   #    hosts:
##   #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
